https://wiki.osdev.org/System_V_ABI

x86-64
This is a 64-bit platform. The stack grows downwards. Parameters to functions are passed in the registers rdi, rsi, rdx, rcx, r8, r9, and further values are passed on the stack in reverse order. Parameters passed on the stack may be modified by the called function. Functions are called using the call instruction that pushes the address of the next instruction to the stack and jumps to the operand. Functions return to the caller using the ret instruction that pops a value from the stack and jump to it. The stack is 16-byte aligned just before the call instruction is called.

Functions preserve the registers rbx, rsp, rbp, r12, r13, r14, and r15; while rax, rdi, rsi, rdx, rcx, r8, r9, r10, r11 are scratch registers. The return value is stored in the rax register, or if it is a 128-bit value, then the higher 64-bits go in rdx. Optionally, functions push rbp such that the caller-return-rip is 8 bytes above it, and set rbp to the address of the saved rbp. This allows iterating through the existing stack frames. This can be eliminated by specifying the -fomit-frame-pointer GCC option.

Signal handlers are executed on the same stack, but 128 bytes known as the red zone is subtracted from the stack before anything is pushed to the stack. This allows small leaf functions to use 128 bytes of stack space without reserving stack space by subtracting from the stack pointer. The red zone is well-known to cause problems for x86-64 kernel developers, as the CPU itself doesn't respect the red zone when calling interrupt handlers. This leads to a subtle kernel breakage as the ABI contradicts the CPU behavior. The solution is to build all kernel code with -mno-red-zone or by handling interrupts in kernel mode on another stack than the current (and thus implementing the ABI).


c lib 를 호출할때 relocation 문제가 생김. 
call _malloc wrt ..plt 로 해결 가능. 
https://www.nasm.us/xdoc/2.11.08/html/nasmdoc7.html#section-7.9.3
Referring to a procedure name using wrt ..plt causes the linker to build a procedure linkage table entry for the symbol, and the reference gives the address of the PLT entry. You can only use this in contexts which would generate a PC-relative relocation normally (i.e. as the destination for CALL or JMP), since ELF contains no relocation type to refer to PLT entries absolutely.


64비트 리눅스(System V AMD64 ABI) 기준으로,

caller-saved 레지스터(RDI, RSI, RDX, RCX, R8, R9, R10, R11)는 호출 직후 원래 값을 유지할 필요가 있으면 호출자가 직접 push/pop 등으로 보존해야 하고,
-> 컴파일러등 자주 쓰이는 레지스터들 + 32 비트에서 EAX, ECX, EDX 에서 확장된거임. 여기 64 비트에서 6개 까지 추가됨.
callee-saved 레지스터(RBX, RBP, R12, R13, R14, R15)는 호출된 함수가 함부로 건드리면 안 되며(만약 사용한다면 함수가 push/pop으로 복원해야 함)